{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nfunction useAccordionFocus(itemsCount) {\n  var controlsRefs = useRef([]);\n\n  var handleItemKeydown = function handleItemKeydown(index) {\n    return function (event) {\n      var _a, _b;\n\n      if (event.code === \"ArrowDown\") {\n        event.preventDefault();\n        var nextFocusElement = controlsRefs.current[index + 1];\n\n        if (nextFocusElement) {\n          nextFocusElement.focus();\n        } else {\n          (_a = controlsRefs.current[0]) == null ? void 0 : _a.focus();\n        }\n      }\n\n      if (event.code === \"ArrowUp\") {\n        event.preventDefault();\n        var previousFocusElement = controlsRefs.current[index - 1];\n\n        if (previousFocusElement) {\n          previousFocusElement.focus();\n        } else {\n          (_b = controlsRefs.current[controlsRefs.current.length - 1]) == null ? void 0 : _b.focus();\n        }\n      }\n    };\n  };\n\n  var assignControlRef = function assignControlRef(index) {\n    return function (node) {\n      controlsRefs.current[index] = node;\n    };\n  };\n\n  useDidUpdate(function () {\n    controlsRefs.current = controlsRefs.current.slice(0, itemsCount);\n  }, [itemsCount]);\n  return {\n    handleItemKeydown: handleItemKeydown,\n    assignControlRef: assignControlRef\n  };\n}\n\nexport { useAccordionFocus };","map":{"version":3,"mappings":";;;AAEO,SAASA,iBAAT,CAA2BC,UAA3B,EAAuC;EAC5C,IAAMC,YAAY,GAAGC,MAAM,CAAC,EAAD,CAA3B;;EACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD;IAAA,OAAW,UAACC,KAAD,EAAW;MAC9C,IAAIC,EAAJ,EAAQC,EAAR;;MACA,IAAIF,KAAK,CAACG,IAAN,KAAe,WAAnB,EAAgC;QAC9BH,KAAK,CAACI,cAAN;QACA,IAAMC,gBAAgB,GAAGT,YAAY,CAACU,OAAb,CAAqBP,KAAK,GAAG,CAA7B,CAAzB;;QACA,IAAIM,gBAAJ,EAAsB;UACpBA,gBAAgB,CAACE,KAAjB;QACD,CAFD,MAEO;UACL,CAACN,EAAE,GAAGL,YAAY,CAACU,OAAb,CAAqB,CAArB,CAAN,KAAkC,IAAlC,GAAyC,KAAK,CAA9C,GAAkDL,EAAE,CAACM,KAAH,EAAlD;QACD;MACF;;MACD,IAAIP,KAAK,CAACG,IAAN,KAAe,SAAnB,EAA8B;QAC5BH,KAAK,CAACI,cAAN;QACA,IAAMI,oBAAoB,GAAGZ,YAAY,CAACU,OAAb,CAAqBP,KAAK,GAAG,CAA7B,CAA7B;;QACA,IAAIS,oBAAJ,EAA0B;UACxBA,oBAAoB,CAACD,KAArB;QACD,CAFD,MAEO;UACL,CAACL,EAAE,GAAGN,YAAY,CAACU,OAAb,CAAqBV,YAAY,CAACU,OAAb,CAAqBG,MAArB,GAA8B,CAAnD,CAAN,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgFP,EAAE,CAACK,KAAH,EAAhF;QACD;MACF;IACF,CApByB;EAAA,CAA1B;;EAqBA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACX,KAAD;IAAA,OAAW,UAACY,IAAD,EAAU;MAC5Cf,YAAY,CAACU,OAAb,CAAqBP,KAArB,IAA8BY,IAA9B;IACD,CAFwB;EAAA,CAAzB;;EAGAC,YAAY,CAAC,YAAM;IACjBhB,YAAY,CAACU,OAAb,GAAuBV,YAAY,CAACU,OAAb,CAAqBO,KAArB,CAA2B,CAA3B,EAA8BlB,UAA9B,CAAvB;EACD,CAFW,EAET,CAACA,UAAD,CAFS,CAAZ;EAGA,OAAO;IAAEG,iBAAiB,EAAjBA,iBAAF;IAAqBY,gBAAgB,EAAhBA;EAArB,CAAP;AACF","names":["useAccordionFocus","itemsCount","controlsRefs","useRef","handleItemKeydown","index","event","_a","_b","code","preventDefault","nextFocusElement","current","focus","previousFocusElement","length","assignControlRef","node","useDidUpdate","slice"],"sources":["/Users/toggles/Documents/Projects/Todo App 2/todo-app/node_modules/@mantine/core/src/components/Accordion/use-accordion-focus/use-accordion-focus.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nexport function useAccordionFocus(itemsCount: number) {\n  const controlsRefs = useRef<HTMLButtonElement[]>([]);\n\n  const handleItemKeydown = (index: number) => (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (event.code === 'ArrowDown') {\n      event.preventDefault();\n      const nextFocusElement = controlsRefs.current[index + 1];\n      if (nextFocusElement) {\n        nextFocusElement.focus();\n      } else {\n        controlsRefs.current[0]?.focus();\n      }\n    }\n\n    if (event.code === 'ArrowUp') {\n      event.preventDefault();\n      const previousFocusElement = controlsRefs.current[index - 1];\n      if (previousFocusElement) {\n        previousFocusElement.focus();\n      } else {\n        controlsRefs.current[controlsRefs.current.length - 1]?.focus();\n      }\n    }\n  };\n\n  const assignControlRef = (index: number) => (node: HTMLButtonElement) => {\n    controlsRefs.current[index] = node;\n  };\n\n  useDidUpdate(() => {\n    controlsRefs.current = controlsRefs.current.slice(0, itemsCount);\n  }, [itemsCount]);\n\n  return { handleItemKeydown, assignControlRef };\n}\n"]},"metadata":{},"sourceType":"module"}