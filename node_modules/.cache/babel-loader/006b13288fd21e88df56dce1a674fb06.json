{"ast":null,"code":"import { useState } from 'react';\nimport { isFormList, formList } from './form-list/form-list.js';\nimport { validateValues, validateFieldValue } from './validate-values/validate-values.js';\nimport { filterErrors } from './filter-errors/filter-errors.js';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.js';\nimport { getErrorPath } from './get-error-path/get-error-path.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useForm(_ref) {\n  let {\n    initialValues,\n    initialErrors,\n    validate: rules,\n    schema\n  } = _ref;\n  const [errors, setErrors] = useState(filterErrors(initialErrors));\n  const [values, setValues] = useState(initialValues);\n\n  const clearErrors = () => setErrors({});\n\n  const setFieldError = (field, error) => setErrors(current => __spreadProps(__spreadValues({}, current), {\n    [field]: error\n  }));\n\n  const clearFieldError = field => setErrors(current => {\n    const clone = __spreadValues({}, current);\n\n    delete clone[field];\n    return clone;\n  });\n\n  const setFieldValue = (field, value, errorPath) => {\n    setValues(currentValues => __spreadProps(__spreadValues({}, currentValues), {\n      [field]: value\n    }));\n    clearFieldError(errorPath || field);\n  };\n\n  const setListItem = (field, index, value, errorPath) => {\n    const list = values[field];\n\n    if (isFormList(list) && list[index] !== void 0) {\n      const cloned = [...list];\n      cloned[index] = value;\n      setFieldValue(field, formList(cloned), errorPath);\n    }\n  };\n\n  const removeListItem = (field, indices) => {\n    const list = values[field];\n\n    if (isFormList(list)) {\n      setFieldValue(field, formList(list.filter((_, index) => Array.isArray(indices) ? !indices.includes(index) : indices !== index)));\n    }\n  };\n\n  const addListItem = (field, payload) => {\n    const list = values[field];\n\n    if (isFormList(list)) {\n      setFieldValue(field, formList([...list, payload]));\n    }\n  };\n\n  const reorderListItem = (field, _ref2) => {\n    let {\n      from,\n      to\n    } = _ref2;\n    const list = values[field];\n\n    if (isFormList(list) && list[from] !== void 0 && list[to] !== void 0) {\n      const cloned = [...list];\n      const item = list[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      setFieldValue(field, formList(cloned));\n    }\n  };\n\n  const validate = () => {\n    const results = validateValues(schema || rules, values);\n    setErrors(results.errors);\n    return results;\n  };\n\n  const validateField = field => {\n    const results = validateFieldValue(field, schema || rules, values);\n    results.hasError ? setFieldError(field, results.error) : clearFieldError(field);\n    return results;\n  };\n\n  const onSubmit = handleSubmit => event => {\n    event.preventDefault();\n    const results = validate();\n    !results.hasErrors && handleSubmit(values, event);\n  };\n\n  const reset = () => {\n    setValues(initialValues);\n    clearErrors();\n  };\n\n  const getInputProps = function (field) {\n    let {\n      type,\n      withError = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const value = values[field];\n    const onChange = getInputOnChange(val => setFieldValue(field, val));\n    const payload = type === \"checkbox\" ? {\n      checked: value,\n      onChange\n    } : {\n      value,\n      onChange\n    };\n\n    if (withError && errors[field]) {\n      payload.error = errors[field];\n    }\n\n    return payload;\n  };\n\n  const getListInputProps = function (field, index, listField) {\n    let {\n      type,\n      withError = true\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const list = values[field];\n\n    if (isFormList(list) && list[index] && listField in list[index]) {\n      const listValue = list[index];\n      const value = listValue[listField];\n      const listItemErrorPath = getErrorPath([field, index, listField]);\n      const onChange = getInputOnChange(val => setListItem(field, index, __spreadProps(__spreadValues({}, listValue), {\n        [listField]: val\n      }), listItemErrorPath));\n      const payload = type === \"checkbox\" ? {\n        checked: value,\n        onChange\n      } : {\n        value,\n        onChange\n      };\n      const error = errors[getErrorPath([field, index, listField])];\n\n      if (withError && error) {\n        payload.error = error;\n      }\n\n      return payload;\n    }\n\n    return {};\n  };\n\n  return {\n    values,\n    setValues,\n    setFieldValue,\n    errors,\n    setErrors,\n    clearErrors,\n    clearFieldError,\n    setFieldError,\n    setListItem,\n    removeListItem,\n    addListItem,\n    reorderListItem,\n    validate,\n    validateField,\n    onSubmit,\n    reset,\n    getInputProps,\n    getListInputProps\n  };\n}\n\nexport { useForm };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useForm","initialValues","initialErrors","validate","rules","schema","errors","setErrors","useState","filterErrors","values","setValues","clearErrors","setFieldError","field","error","current","clearFieldError","clone","setFieldValue","errorPath","currentValues","setListItem","index","list","isFormList","cloned","formList","removeListItem","indices","filter","_","Array","isArray","includes","addListItem","payload","reorderListItem","from","to","item","splice","results","validateValues","validateField","validateFieldValue","hasError","onSubmit","handleSubmit","event","preventDefault","hasErrors","reset","getInputProps","type","withError","onChange","getInputOnChange","val","checked","getListInputProps","listField","listValue","listItemErrorPath","getErrorPath"],"sources":["/Users/toggles/Documents/GitHub/task-manager/node_modules/@mantine/form/src/use-form.ts"],"sourcesContent":["import { useState } from 'react';\nimport { formList, isFormList, FormList } from './form-list/form-list';\nimport { validateValues, validateFieldValue } from './validate-values/validate-values';\nimport { filterErrors } from './filter-errors/filter-errors';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change';\nimport { getErrorPath } from './get-error-path/get-error-path';\nimport type {\n  FormErrors,\n  FormRules,\n  FormValidationResult,\n  FormFieldValidationResult,\n  GetInputProps,\n  GetInputPropsFieldType,\n} from './types';\n\nexport interface UseFormInput<T> {\n  initialValues: T;\n  initialErrors?: FormErrors;\n  validate?: FormRules<T>;\n  schema?: (values: Record<string, any>) => FormErrors;\n}\n\nexport interface UseFormReturnType<T> {\n  values: T;\n  setValues: React.Dispatch<React.SetStateAction<T>>;\n  setFieldValue: <K extends keyof T, V extends T[K]>(field: K, value: V) => void;\n  errors: FormErrors;\n  setErrors: React.Dispatch<React.SetStateAction<FormErrors>>;\n  setFieldError: <K extends keyof T>(field: K, error: React.ReactNode) => void;\n  clearFieldError: <K extends keyof T>(field: K) => void;\n  clearErrors(): void;\n  setListItem: <K extends keyof T, V extends T[K]>(\n    field: K,\n    index: number,\n    value: V extends FormList<infer U> ? U : never\n  ) => void;\n  addListItem: <K extends keyof T, V extends T[K]>(\n    field: K,\n    payload: V extends FormList<infer U> ? U : never\n  ) => void;\n  removeListItem: <K extends keyof T>(field: K, indices: number[] | number) => void;\n  reorderListItem: <K extends keyof T>(field: K, payload: { from: number; to: number }) => void;\n  validate(): FormValidationResult;\n  validateField: (field: string) => FormFieldValidationResult;\n  onSubmit(\n    handleSubmit: (values: T, event: React.FormEvent) => void\n  ): (event?: React.FormEvent) => void;\n  reset(): void;\n  getInputProps: <K extends keyof T, L extends GetInputPropsFieldType = 'input'>(\n    field: K,\n    options?: { type?: L; withError?: boolean }\n  ) => GetInputProps<L>;\n\n  getListInputProps: <\n    K extends keyof T,\n    U extends T[K],\n    L extends GetInputPropsFieldType = 'input'\n  >(\n    field: K,\n    index: number,\n    listField: U extends FormList<infer V> ? keyof V : never,\n    options?: { type?: L; withError?: boolean }\n  ) => GetInputProps<L>;\n}\n\nexport function useForm<T extends { [key: string]: any }>({\n  initialValues,\n  initialErrors,\n  validate: rules,\n  schema,\n}: UseFormInput<T>): UseFormReturnType<T> {\n  const [errors, setErrors] = useState(filterErrors(initialErrors));\n  const [values, setValues] = useState(initialValues);\n\n  const clearErrors = () => setErrors({});\n  const setFieldError = (field: keyof T, error: React.ReactNode) =>\n    setErrors((current) => ({ ...current, [field]: error }));\n\n  const clearFieldError = (field: keyof T) =>\n    setErrors((current) => {\n      const clone: any = { ...current };\n      delete clone[field];\n      return clone;\n    });\n\n  const setFieldValue = <K extends keyof T, V extends T[K]>(\n    field: K,\n    value: V,\n    errorPath?: string\n  ) => {\n    setValues((currentValues) => ({ ...currentValues, [field]: value }));\n    clearFieldError(errorPath || field);\n  };\n\n  const setListItem = <K extends keyof T, V extends T[K]>(\n    field: K,\n    index: number,\n    value: V[K][number],\n    errorPath?: string\n  ) => {\n    const list = values[field];\n    if (isFormList(list) && list[index] !== undefined) {\n      const cloned = [...list];\n      cloned[index] = value;\n      setFieldValue(field, formList(cloned) as any, errorPath);\n    }\n  };\n\n  const removeListItem = <K extends keyof T>(field: K, indices: number[] | number) => {\n    const list = values[field];\n\n    if (isFormList(list)) {\n      setFieldValue(\n        field,\n        formList(\n          list.filter((_: any, index: number) =>\n            Array.isArray(indices) ? !indices.includes(index) : indices !== index\n          )\n        ) as any\n      );\n    }\n  };\n\n  const addListItem = <K extends keyof T, V extends T[K]>(field: K, payload: V[number]) => {\n    const list = values[field];\n\n    if (isFormList(list)) {\n      setFieldValue(field, formList([...list, payload]) as any);\n    }\n  };\n\n  const reorderListItem = <K extends keyof T>(\n    field: K,\n    { from, to }: { from: number; to: number }\n  ) => {\n    const list = values[field];\n\n    if (isFormList(list) && list[from] !== undefined && list[to] !== undefined) {\n      const cloned = [...list];\n      const item = list[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      setFieldValue(field, formList(cloned) as any);\n    }\n  };\n\n  const validate = () => {\n    const results = validateValues(schema || rules, values);\n    setErrors(results.errors);\n    return results;\n  };\n\n  const validateField = (field: string) => {\n    const results = validateFieldValue(field, schema || rules, values);\n    results.hasError ? setFieldError(field, results.error) : clearFieldError(field);\n    return results;\n  };\n\n  const onSubmit =\n    (handleSubmit: (values: T, event: React.FormEvent) => void) => (event: React.FormEvent) => {\n      event.preventDefault();\n      const results = validate();\n      !results.hasErrors && handleSubmit(values, event);\n    };\n\n  const reset = () => {\n    setValues(initialValues);\n    clearErrors();\n  };\n\n  const getInputProps = <\n    K extends keyof T,\n    U extends T[K],\n    L extends GetInputPropsFieldType = 'input'\n  >(\n    field: K,\n    { type, withError = true }: { type?: L; withError?: boolean } = {}\n  ): GetInputProps<L> => {\n    const value = values[field];\n    const onChange = getInputOnChange<U>((val: U) => setFieldValue(field, val)) as any;\n\n    const payload: any = type === 'checkbox' ? { checked: value, onChange } : { value, onChange };\n\n    if (withError && errors[field as any]) {\n      payload.error = errors[field as any];\n    }\n\n    return payload as any;\n  };\n\n  const getListInputProps = <\n    K extends keyof T,\n    U extends T[K][number],\n    LK extends keyof U,\n    L extends GetInputPropsFieldType = 'input'\n  >(\n    field: K,\n    index: number,\n    listField: LK,\n    { type, withError = true }: { type?: L; withError?: boolean } = {}\n  ): GetInputProps<L> => {\n    const list = values[field];\n\n    if (isFormList(list) && list[index] && listField in list[index]) {\n      const listValue = list[index];\n      const value = listValue[listField];\n      const listItemErrorPath = getErrorPath([field, index, listField]);\n      const onChange = getInputOnChange<U[LK]>((val: U[LK]) =>\n        setListItem(field, index, { ...listValue, [listField]: val }, listItemErrorPath)\n      ) as any;\n      const payload: any = type === 'checkbox' ? { checked: value, onChange } : { value, onChange };\n      const error = errors[getErrorPath([field, index, listField])];\n\n      if (withError && error) {\n        payload.error = error;\n      }\n\n      return payload;\n    }\n\n    return {} as any;\n  };\n\n  return {\n    values,\n    setValues,\n    setFieldValue,\n    errors,\n    setErrors,\n    clearErrors,\n    clearFieldError,\n    setFieldError,\n    setListItem,\n    removeListItem,\n    addListItem,\n    reorderListItem,\n    validate,\n    validateField,\n    onSubmit,\n    reset,\n    getInputProps,\n    getListInputProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}