{"ast":null,"code":"import _slicedToArray from \"/Users/toggles/Documents/Projects/Todo App 2/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useMemo, useEffect } from 'react';\nvar defaultState = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar browser = typeof window !== \"undefined\";\n\nfunction useResizeObserver() {\n  var frameID = useRef(0);\n  var ref = useRef(null);\n\n  var _useState = useState(defaultState),\n      _useState2 = _slicedToArray(_useState, 2),\n      rect = _useState2[0],\n      setRect = _useState2[1];\n\n  var observer = useMemo(function () {\n    return browser ? new ResizeObserver(function (entries) {\n      var entry = entries[0];\n\n      if (entry) {\n        cancelAnimationFrame(frameID.current);\n        frameID.current = requestAnimationFrame(function () {\n          if (ref.current) {\n            setRect(entry.contentRect);\n          }\n        });\n      }\n    }) : null;\n  }, []);\n  useEffect(function () {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return function () {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n  return [ref, rect];\n}\n\nfunction useElementSize() {\n  var _useResizeObserver = useResizeObserver(),\n      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),\n      ref = _useResizeObserver2[0],\n      _useResizeObserver2$ = _useResizeObserver2[1],\n      width = _useResizeObserver2$.width,\n      height = _useResizeObserver2$.height;\n\n  return {\n    ref: ref,\n    width: width,\n    height: height\n  };\n}\n\nexport { useElementSize, useResizeObserver };","map":{"version":3,"mappings":";;AACA,IAAMA,YAAY,GAAG;EACnBC,CAAC,EAAE,CADgB;EAEnBC,CAAC,EAAE,CAFgB;EAGnBC,KAAK,EAAE,CAHY;EAInBC,MAAM,EAAE,CAJW;EAKnBC,GAAG,EAAE,CALc;EAMnBC,IAAI,EAAE,CANa;EAOnBC,MAAM,EAAE,CAPW;EAQnBC,KAAK,EAAE;AARY,CAArB;AAUA,IAAMC,OAAO,GAAG,OAAOC,MAAP,KAAkB,WAAlC;;AACO,SAASC,iBAAT,GAA6B;EAClC,IAAMC,OAAO,GAAGC,MAAM,CAAC,CAAD,CAAtB;EACA,IAAMC,GAAG,GAAGD,MAAM,CAAC,IAAD,CAAlB;;EACA,gBAAwBE,QAAQ,CAACf,YAAD,CAAhC;EAAA;EAAA,IAAOgB,IAAP;EAAA,IAAaC,OAAb;;EACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC;IAAA,OAAMV,OAAO,GAAG,IAAIW,cAAJ,CAAmB,UAACC,OAAD,EAAa;MACvE,IAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB;;MACA,IAAIC,KAAJ,EAAW;QACTC,oBAAoB,CAACX,OAAO,CAACY,OAAT,CAApB;QACAZ,OAAO,CAACY,OAAR,GAAkBC,qBAAqB,CAAC,YAAM;UAC5C,IAAIX,GAAG,CAACU,OAAR,EAAiB;YACfP,OAAO,CAACK,KAAK,CAACI,WAAP,CAAP;UACD;QACF,CAJsC,CAAvC;MAKD;IACF,CAVwC,CAAH,GAUjC,IAVoB;EAAA,CAAD,EAUb,EAVa,CAAxB;EAWAC,SAAS,CAAC,YAAM;IACd,IAAIb,GAAG,CAACU,OAAR,EAAiB;MACfN,QAAQ,CAACU,OAAT,CAAiBd,GAAG,CAACU,OAArB;IACD;;IACD,OAAO,YAAM;MACXN,QAAQ,CAACW,UAAT;;MACA,IAAIjB,OAAO,CAACY,OAAZ,EAAqB;QACnBD,oBAAoB,CAACX,OAAO,CAACY,OAAT,CAApB;MACD;IACF,CALD;EAMD,CAVQ,EAUN,CAACV,GAAG,CAACU,OAAL,CAVM,CAAT;EAWA,OAAO,CAACV,GAAD,EAAME,IAAN,CAAP;AACD;;AACM,SAASc,cAAT,GAA0B;EAC/B,yBAAiCnB,iBAAiB,EAAlD;EAAA;EAAA,IAAOG,GAAP;EAAA;EAAA,IAAcX,KAAd,wBAAcA,KAAd;EAAA,IAAqBC,MAArB,wBAAqBA,MAArB;;EACA,OAAO;IAAEU,GAAG,EAAHA,GAAF;IAAOX,KAAK,EAALA,KAAP;IAAcC,MAAM,EAANA;EAAd,CAAP;AACF","names":["defaultState","x","y","width","height","top","left","bottom","right","browser","window","useResizeObserver","frameID","useRef","ref","useState","rect","setRect","observer","useMemo","ResizeObserver","entries","entry","cancelAnimationFrame","current","requestAnimationFrame","contentRect","useEffect","observe","disconnect","useElementSize"],"sources":["/Users/toggles/Documents/Projects/Todo App 2/todo-app/node_modules/@mantine/hooks/src/use-resize-observer/use-resize-observer.ts"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\ntype ObserverRect = Omit<DOMRectReadOnly, 'toJSON'>;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nconst browser = typeof window !== 'undefined';\n\nexport function useResizeObserver<T extends HTMLElement = any>() {\n  const frameID = useRef(0);\n  const ref = useRef<T>(null);\n\n  const [rect, setRect] = useState<ObserverRect>(defaultState);\n\n  const observer = useMemo(\n    () =>\n      browser\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    []\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>() {\n  const [ref, { width, height }] = useResizeObserver<T>();\n  return { ref, width, height };\n}\n"]},"metadata":{},"sourceType":"module"}