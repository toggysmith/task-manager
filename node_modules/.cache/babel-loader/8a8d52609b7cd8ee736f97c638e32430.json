{"ast":null,"code":"import _slicedToArray from \"/Users/toggles/Documents/Projects/Todo App 2/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useDirection(t, n) {\n  var _e$useState = e.useState(\"ltr\"),\n      _e$useState2 = _slicedToArray(_e$useState, 2),\n      r = _e$useState2[0],\n      o = _e$useState2[1],\n      _e$useState3 = e.useState(),\n      _e$useState4 = _slicedToArray(_e$useState3, 2),\n      i = _e$useState4[0],\n      u = _e$useState4[1],\n      c = e.useRef(0);\n\n  return e.useEffect(function () {\n    if (void 0 === n && null != t && t.parentElement) {\n      var _e = getComputedStyle(t.parentElement);\n\n      u(_e);\n    }\n  }, [t, n]), e.useEffect(function () {\n    return void 0 === n && function e() {\n      c.current = requestAnimationFrame(function () {\n        var t = null == i ? void 0 : i.direction;\n        t && o(t), e();\n      });\n    }(), function () {\n      return cancelAnimationFrame(c.current);\n    };\n  }, [i, n, o]), n || r;\n}","map":{"version":3,"mappings":";;OAIO,SAASA,YAAT,CAAsBC,CAAtB,EAAmDC,CAAnD,EAAmDA;EACxD,kBAAkCC,EAAMC,QAAND,CAA0B,KAA1BA,CAAlC;EAAA;EAAA,IAAOE,CAAP;EAAA,IAAkBC,CAAlB;EAAA,mBAC0CH,EAAMC,QAAND,EAD1C;EAAA;EAAA,IACOI,CADP;EAAA,IACsBC,CADtB;EAAA,IAEMC,CAFN,GAEeN,EAAMO,MAANP,CAAqB,CAArBA,CAFf;;EA4BA,OAxBAA,EAAMQ,SAANR,CAAgB;IAKd,SAAsBS,CAAtB,KAAIV,CAAJ,IAAIA,QAA+BD,CAAnC,IAAmCA,EAASY,aAA5C,EAA2D;MACzD,IAAMN,KAAgBO,iBAAiBb,EAAQY,aAAzBC,CAAtB;;MACAN,EAAiBD,EAAjBC;IAAiBD;EAAAA,CAPrBJ,EASG,CAACF,CAAD,EAAUC,CAAV,CATHC,GAWAA,EAAMQ,SAANR,CAAgB;IAAA,YASQS,CATR,KASVV,CATU,IACd,SAASa,CAAT,GAASA;MACPN,EAAOO,OAAPP,GAAiBQ,sBAAsB;QACrC,IAAMC,IAAMX,iBAAH,CAAGA,KAAeF,SAA3B;QACIa,KAAKZ,EAAaY,CAAbZ,CAALY,EACJH,GADIG;MACJH,CAHeE,CAAjBR;IAO+BM,CARjC,EADc,EAUP;MAAA,OAAMI,qBAAqBV,EAAOO,OAA5BG,CAAN;IAAA,CAVO;EAAA,CAAhBhB,EAWG,CAACI,CAAD,EAAgBL,CAAhB,EAA+BI,CAA/B,CAXHH,CAXAA,EAwBOD,KAAiBG,CAAxB;AAAwBA","names":["useDirection","element","directionProp","React","useState","direction","setDirection","computedStyle","setComputedStyle","rAFRef","useRef","useEffect","undefined","parentElement","getComputedStyle","getDirection","current","requestAnimationFrame","dir","cancelAnimationFrame"],"sources":["/Users/toggles/Documents/Projects/Todo App 2/todo-app/node_modules/@mantine/core/node_modules/@radix-ui/react-scroll-area/node_modules/@radix-ui/react-use-direction/dist/packages/react/use-direction/src/useDirection.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Direction = 'ltr' | 'rtl';\n\nexport function useDirection(element: HTMLElement | null, directionProp?: Direction) {\n  const [direction, setDirection] = React.useState<Direction>('ltr');\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const rAFRef = React.useRef<number>(0);\n\n  React.useEffect(() => {\n    // We check inherited direction of the parent instead of the `element` itself.\n    // This is because we internally set the computed `dir` on the element so wouldn't be\n    // able to react to changes to the inherited direction. The `dir` attribute we set should\n    // always sync with the direction prop OR its inherited direction.\n    if (directionProp === undefined && element?.parentElement) {\n      const computedStyle = getComputedStyle(element.parentElement);\n      setComputedStyle(computedStyle);\n    }\n  }, [element, directionProp]);\n\n  React.useEffect(() => {\n    function getDirection() {\n      rAFRef.current = requestAnimationFrame(() => {\n        const dir = computedStyle?.direction as Direction | '' | undefined;\n        if (dir) setDirection(dir);\n        getDirection();\n      });\n    }\n\n    if (directionProp === undefined) getDirection();\n    return () => cancelAnimationFrame(rAFRef.current);\n  }, [computedStyle, directionProp, setDirection]);\n\n  return directionProp || direction;\n}\n"]},"metadata":{},"sourceType":"module"}